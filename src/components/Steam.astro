---
interface Game {
  appid: number;
  playtime_forever: number;
  rtime_last_played: number;
}

interface GameResponse {
  response: { game_count: number; games: Game[] };
}

const steamGames = (await fetch("https://apui.vercel.app/api/steam_games").then(
  (data) => data.json(),
)) as GameResponse;

const data = steamGames.response.games;

const steam = data.sort((a, b) => b.playtime_forever - a.playtime_forever);

async function appidtosteamgamename(appid: number) {
  return (await fetch(
    `https://apui.vercel.app/api/steam_info?appid=${appid}`,
  ).then((data) => data.json())) as { gameName: string };
}

const wallpaperengine = steam
  .map(function (e) {
    return e.appid;
  })
  .indexOf(431960);

steam.splice(wallpaperengine, 1);

const mysteamgames = steam.slice(0, 10);

const steamRecentGamesList = mysteamgames.map(async (game) => {
  return {
    name: (await appidtosteamgamename(game.appid)).gameName,
    playtime_forever: game.playtime_forever,
    game_image_url: `https://steamcdn-a.akamaihd.net/steam/apps/${game.appid}/library_600x900_2x.jpg`,
    rtime_last_played: game.rtime_last_played,
    appid: game.appid,
  };
});

const steamRecentGames = await Promise.all(steamRecentGamesList);
---

<section class="grid lg:grid-cols-5 gap-5 w-1/2 ml-[25%] h-2 grid-cols-1">
  {
    steamRecentGames.map((game) => (
      <div class="bg-[#85b3dd] rounded-lg p-4 hover:scale-[1.05] transition-transform duration-300 ease-in-out">
        <a
          href={`https://store.steampowered.com/app/${game.appid}`}
          target="_blank"
        >
          <img
            src={game.game_image_url}
            alt={game.name}
            class="rounded-lg w-full h-auto"
          />
        </a>
        <div class="mt-4 text-sm">
          <p class="text-center font-bold">{game.name}</p>
          <p class="text-center">
            {Math.floor(game.playtime_forever / 60)} hours
          </p>
        </div>
      </div>
    ))
  }
</section>
